---

- name: Check standalone validater systemd file exist
  stat:
    path: "{{ teku_validator_service_file }}"
  register: teku_standalone_validator_file_stat

# Configure and start monolith service
- name: Configure monolith
  block:

    # Stop standalone validator and beacon before configuring monolith
    # Running two validators result in penalty
    - name: Stop standalone validator service
      systemd:
        name: "{{ teku_validator_service_name }}"
        state: stopped
        enabled: no
      become: true
      when: "teku_standalone_validator_file_stat.stat.exists"

    - name: Stop standalone beacon service
      systemd:
        name: "{{ teku_beacon_service_name }}"
        state: stopped
      become: true
      when: "teku_standalone_validator_file_stat.stat.exists"

    - name: Remove standalone validator systemd file
      file:
        path: "{{ teku_validator_service_file }}"
        state: absent
      become: true

    - name: Create Teku monolith systemd service
      template:
        src: "{{ teku_systemd_template }}"
        dest: "{{ teku_monolith_service_file }}"
        owner: "root"
        group: "root"
      become: true
      when:
        - teku_managed_service
      notify:
        - reload_systemd_configs

    - name: Reload systemd to reread configs
      systemd:
        daemon_reload: yes
      become: true

    - name: Enable and start Teku service
      systemd:
        name: "{{ teku_monolith_service_name }}"
        state: 'started'
        enabled: true
      become: true
      when:
        - teku_managed_service

  when:
    - "ansible_os_family != 'Darwin'"
    - "not teku_standalone_validator"


# Configure and start standalone services
- name: Configure standalone validator
  block:

    - name: Check teku systemd file exist
      stat:
        path: "{{ teku_monolith_service_file }}"
      register: teku_monolith_file_stat

    - name: Stop monolith service
      systemd:
        name: "{{ teku_monolith_service_name }}"
        state: stopped
      become: true
      when:
        - "not teku_standalone_validator_file_stat.stat.exists"
        - "teku_monolith_file_stat.stat.exists"

    - name: Create Teku beacon systemd service
      template:
        src: "{{ teku_systemd_template }}"
        dest: "{{ teku_beacon_service_file }}"
        owner: "root"
        group: "root"
      become: true
      when:
        - "teku_managed_service"
      vars:
        teku_log_file: "{{ teku_beacon_log_file }}"
        teku_config_file: "{{ teku_beacon_config_file }}"
      notify:
        - restart_teku

    - name: Create Teku validator systemd service
      template:
        src: "{{ teku_systemd_template }}"
        dest: "{{ teku_validator_service_file }}"
        owner: "root"
        group: "root"
      become: true
      when:
        - "teku_managed_service"
      vars:
        teku_sub_command: 'validator-client'
        teku_log_file: "{{ teku_validator_log_file }}"
        teku_config_file: "{{ teku_validator_config_file }}"
      notify:
        - restart_teku_validator

    - name: Reload systemd to reread configs
      systemd:
        daemon_reload: yes
      become: true

    - name: Enable and start Teku service - beacon
      systemd:
        name: "{{ teku_beacon_service_name }}"
        state: 'started'
        enabled: true
      become: true
      when:
        - teku_managed_service

    - name: Enable and start Teku service - validator
      systemd:
        name: "{{ teku_validator_service_name }}"
        state: 'started'
        enabled: true
      become: true
      when:
        - "teku_managed_service"

  when:
    - "ansible_os_family != 'Darwin'"
    - "teku_standalone_validator"


# Darwin only
- name: Create Launchd service plist for Darwin
  template:
    src: "{{ teku_launchd_template }}"
    dest: "{{ teku_launchd_dir }}/tech.pegasyseng.teku.plist"
  become: true
  when: ( ansible_os_family == "Darwin" ) and
    ( teku_managed_service )
